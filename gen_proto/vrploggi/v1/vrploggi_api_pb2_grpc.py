# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

from vrploggi.v1 import vrploggi_api_pb2 as vrploggi_dot_v1_dot_vrploggi__api__pb2


class VrpLoggiStub(object):
  """FIXME: Change VrpLoggi to VrpLoggiAPI to comply with linter.
  Handles Vrploggi API.
  FIXME: Change Payload, Response, RoutePayload, RouteResponse
  to SortAndRouteRequest, SortAndRouteResponse, RouteRequest, RouteResponse
  respectively to comply with linter
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.SortAndRoute = channel.unary_unary(
        '/loggi.vrploggi.v1.VrpLoggi/SortAndRoute',
        request_serializer=vrploggi_dot_v1_dot_vrploggi__api__pb2.Payload.SerializeToString,
        response_deserializer=vrploggi_dot_v1_dot_vrploggi__api__pb2.Response.FromString,
        )
    self.Route = channel.unary_unary(
        '/loggi.vrploggi.v1.VrpLoggi/Route',
        request_serializer=vrploggi_dot_v1_dot_vrploggi__api__pb2.RoutePayload.SerializeToString,
        response_deserializer=vrploggi_dot_v1_dot_vrploggi__api__pb2.RouteResponse.FromString,
        )
    self.SolveTSP = channel.unary_unary(
        '/loggi.vrploggi.v1.VrpLoggi/SolveTSP',
        request_serializer=vrploggi_dot_v1_dot_vrploggi__api__pb2.SolveTSPRequest.SerializeToString,
        response_deserializer=vrploggi_dot_v1_dot_vrploggi__api__pb2.SolveTSPResponse.FromString,
        )
    self.RoutePackage = channel.unary_unary(
        '/loggi.vrploggi.v1.VrpLoggi/RoutePackage',
        request_serializer=vrploggi_dot_v1_dot_vrploggi__api__pb2.RoutePackageRequest.SerializeToString,
        response_deserializer=vrploggi_dot_v1_dot_vrploggi__api__pb2.RoutePackageResponse.FromString,
        )
    self.RouteBag = channel.unary_unary(
        '/loggi.vrploggi.v1.VrpLoggi/RouteBag',
        request_serializer=vrploggi_dot_v1_dot_vrploggi__api__pb2.RouteBagRequest.SerializeToString,
        response_deserializer=vrploggi_dot_v1_dot_vrploggi__api__pb2.RouteBagResponse.FromString,
        )
    self.MakeBid = channel.unary_unary(
        '/loggi.vrploggi.v1.VrpLoggi/MakeBid',
        request_serializer=vrploggi_dot_v1_dot_vrploggi__api__pb2.MakeBidRequest.SerializeToString,
        response_deserializer=vrploggi_dot_v1_dot_vrploggi__api__pb2.MakeBidResponse.FromString,
        )
    self.SolveVRP = channel.unary_unary(
        '/loggi.vrploggi.v1.VrpLoggi/SolveVRP',
        request_serializer=vrploggi_dot_v1_dot_vrploggi__api__pb2.SolveVRPRequest.SerializeToString,
        response_deserializer=vrploggi_dot_v1_dot_vrploggi__api__pb2.SolveVRPResponse.FromString,
        )
    self.MergeRoutes = channel.unary_unary(
        '/loggi.vrploggi.v1.VrpLoggi/MergeRoutes',
        request_serializer=vrploggi_dot_v1_dot_vrploggi__api__pb2.MergeRoutesRequest.SerializeToString,
        response_deserializer=vrploggi_dot_v1_dot_vrploggi__api__pb2.MergeRoutesResponse.FromString,
        )


class VrpLoggiServicer(object):
  """FIXME: Change VrpLoggi to VrpLoggiAPI to comply with linter.
  Handles Vrploggi API.
  FIXME: Change Payload, Response, RoutePayload, RouteResponse
  to SortAndRouteRequest, SortAndRouteResponse, RouteRequest, RouteResponse
  respectively to comply with linter
  """

  def SortAndRoute(self, request, context):
    """RPC service that returns the routing response.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Route(self, request, context):
    """RPC service that returns each route data.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def SolveTSP(self, request, context):
    """Request to solve an open travelling salesman problem.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def RoutePackage(self, request, context):
    """Selecting a route for a package.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def RouteBag(self, request, context):
    """RPC that make a bid for a bag to fit in a bag.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def MakeBid(self, request, context):
    """RPC that make a bid for a package to fit in a bag.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def SolveVRP(self, request, context):
    """Request to solve an open vehicle routing problem.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def MergeRoutes(self, request, context):
    """Request to clusterized a set routes in routes with greater capacity.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_VrpLoggiServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'SortAndRoute': grpc.unary_unary_rpc_method_handler(
          servicer.SortAndRoute,
          request_deserializer=vrploggi_dot_v1_dot_vrploggi__api__pb2.Payload.FromString,
          response_serializer=vrploggi_dot_v1_dot_vrploggi__api__pb2.Response.SerializeToString,
      ),
      'Route': grpc.unary_unary_rpc_method_handler(
          servicer.Route,
          request_deserializer=vrploggi_dot_v1_dot_vrploggi__api__pb2.RoutePayload.FromString,
          response_serializer=vrploggi_dot_v1_dot_vrploggi__api__pb2.RouteResponse.SerializeToString,
      ),
      'SolveTSP': grpc.unary_unary_rpc_method_handler(
          servicer.SolveTSP,
          request_deserializer=vrploggi_dot_v1_dot_vrploggi__api__pb2.SolveTSPRequest.FromString,
          response_serializer=vrploggi_dot_v1_dot_vrploggi__api__pb2.SolveTSPResponse.SerializeToString,
      ),
      'RoutePackage': grpc.unary_unary_rpc_method_handler(
          servicer.RoutePackage,
          request_deserializer=vrploggi_dot_v1_dot_vrploggi__api__pb2.RoutePackageRequest.FromString,
          response_serializer=vrploggi_dot_v1_dot_vrploggi__api__pb2.RoutePackageResponse.SerializeToString,
      ),
      'RouteBag': grpc.unary_unary_rpc_method_handler(
          servicer.RouteBag,
          request_deserializer=vrploggi_dot_v1_dot_vrploggi__api__pb2.RouteBagRequest.FromString,
          response_serializer=vrploggi_dot_v1_dot_vrploggi__api__pb2.RouteBagResponse.SerializeToString,
      ),
      'MakeBid': grpc.unary_unary_rpc_method_handler(
          servicer.MakeBid,
          request_deserializer=vrploggi_dot_v1_dot_vrploggi__api__pb2.MakeBidRequest.FromString,
          response_serializer=vrploggi_dot_v1_dot_vrploggi__api__pb2.MakeBidResponse.SerializeToString,
      ),
      'SolveVRP': grpc.unary_unary_rpc_method_handler(
          servicer.SolveVRP,
          request_deserializer=vrploggi_dot_v1_dot_vrploggi__api__pb2.SolveVRPRequest.FromString,
          response_serializer=vrploggi_dot_v1_dot_vrploggi__api__pb2.SolveVRPResponse.SerializeToString,
      ),
      'MergeRoutes': grpc.unary_unary_rpc_method_handler(
          servicer.MergeRoutes,
          request_deserializer=vrploggi_dot_v1_dot_vrploggi__api__pb2.MergeRoutesRequest.FromString,
          response_serializer=vrploggi_dot_v1_dot_vrploggi__api__pb2.MergeRoutesResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'loggi.vrploggi.v1.VrpLoggi', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
