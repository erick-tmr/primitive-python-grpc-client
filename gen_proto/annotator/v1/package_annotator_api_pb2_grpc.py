# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

from annotator.v1 import package_annotator_api_pb2 as annotator_dot_v1_dot_package__annotator__api__pb2


class PackageAnnotatorAPIStub(object):
  """Handles all Annotations APIs, all services wanting to annotate anything
  needs to call and/or implement this service.
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.Annotate = channel.unary_unary(
        '/loggi.annotator.v1.PackageAnnotatorAPI/Annotate',
        request_serializer=annotator_dot_v1_dot_package__annotator__api__pb2.AnnotateRequest.SerializeToString,
        response_deserializer=annotator_dot_v1_dot_package__annotator__api__pb2.AnnotateResponse.FromString,
        )
    self.GetLastAnnotationByType = channel.unary_unary(
        '/loggi.annotator.v1.PackageAnnotatorAPI/GetLastAnnotationByType',
        request_serializer=annotator_dot_v1_dot_package__annotator__api__pb2.GetLastAnnotationByTypeRequest.SerializeToString,
        response_deserializer=annotator_dot_v1_dot_package__annotator__api__pb2.GetLastAnnotationByTypeResponse.FromString,
        )
    self.GetAllAnnotations = channel.unary_unary(
        '/loggi.annotator.v1.PackageAnnotatorAPI/GetAllAnnotations',
        request_serializer=annotator_dot_v1_dot_package__annotator__api__pb2.GetAllAnnotationsRequest.SerializeToString,
        response_deserializer=annotator_dot_v1_dot_package__annotator__api__pb2.GetAllAnnotationsResponse.FromString,
        )


class PackageAnnotatorAPIServicer(object):
  """Handles all Annotations APIs, all services wanting to annotate anything
  needs to call and/or implement this service.
  """

  def Annotate(self, request, context):
    """This interface serves two purposes:
    1) When external clients want to annotate a package with a given information, they only need to
    call the Annotator's implementation with the package metadata and the desired type of annotation.
    It is the Annoatator's job to multiplex the call to the proper service.
    2) The other services implement this same interface to compute the annotation itself, but  they only
    need to worry about its own annotation type.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def GetLastAnnotationByType(self, request, context):
    """This service returns the last package annotation of an annotation type.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def GetAllAnnotations(self, request, context):
    """This service returns all valid package annotations of a package.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_PackageAnnotatorAPIServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'Annotate': grpc.unary_unary_rpc_method_handler(
          servicer.Annotate,
          request_deserializer=annotator_dot_v1_dot_package__annotator__api__pb2.AnnotateRequest.FromString,
          response_serializer=annotator_dot_v1_dot_package__annotator__api__pb2.AnnotateResponse.SerializeToString,
      ),
      'GetLastAnnotationByType': grpc.unary_unary_rpc_method_handler(
          servicer.GetLastAnnotationByType,
          request_deserializer=annotator_dot_v1_dot_package__annotator__api__pb2.GetLastAnnotationByTypeRequest.FromString,
          response_serializer=annotator_dot_v1_dot_package__annotator__api__pb2.GetLastAnnotationByTypeResponse.SerializeToString,
      ),
      'GetAllAnnotations': grpc.unary_unary_rpc_method_handler(
          servicer.GetAllAnnotations,
          request_deserializer=annotator_dot_v1_dot_package__annotator__api__pb2.GetAllAnnotationsRequest.FromString,
          response_serializer=annotator_dot_v1_dot_package__annotator__api__pb2.GetAllAnnotationsResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'loggi.annotator.v1.PackageAnnotatorAPI', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
