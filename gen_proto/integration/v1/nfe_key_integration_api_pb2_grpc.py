# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

from integration.v1 import nfe_key_integration_api_pb2 as integration_dot_v1_dot_nfe__key__integration__api__pb2


class NfeKeyIntegrationAPIStub(object):
  """Returns DANFE metadata if the integration was successful or an error otherwise.
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.NfeKeyIntegration = channel.unary_unary(
        '/loggi.integration.v1.NfeKeyIntegrationAPI/NfeKeyIntegration',
        request_serializer=integration_dot_v1_dot_nfe__key__integration__api__pb2.NfeKeyIntegrationRequest.SerializeToString,
        response_deserializer=integration_dot_v1_dot_nfe__key__integration__api__pb2.NfeKeyIntegrationResponse.FromString,
        )


class NfeKeyIntegrationAPIServicer(object):
  """Returns DANFE metadata if the integration was successful or an error otherwise.
  """

  def NfeKeyIntegration(self, request, context):
    """Integrates a package from a given DANFE.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_NfeKeyIntegrationAPIServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'NfeKeyIntegration': grpc.unary_unary_rpc_method_handler(
          servicer.NfeKeyIntegration,
          request_deserializer=integration_dot_v1_dot_nfe__key__integration__api__pb2.NfeKeyIntegrationRequest.FromString,
          response_serializer=integration_dot_v1_dot_nfe__key__integration__api__pb2.NfeKeyIntegrationResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'loggi.integration.v1.NfeKeyIntegrationAPI', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
